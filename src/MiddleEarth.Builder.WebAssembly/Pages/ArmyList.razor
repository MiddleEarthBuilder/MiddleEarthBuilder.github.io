@page "/{Side}/army-lists"
@page "/{Side}/army-lists/{ArmyListName}"
@using MiddleEarth.Builder.Application
@using MiddleEarth.Builder.Infrastructure
@using MiddleEarth.Models
@inject NavigationManager NavigationManager
@inject BuilderContext Context

<header>
    <h3>Army List</h3>
    @if (string.IsNullOrEmpty(ArmyListName))
    {
        <EditForm class="d-flex flex-row align-items-center justify-content-center" Model="@_armyListNameForm" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="armyListName" class="form-label m-0 me-2">Name</label>
            <InputText id="armyListName" class="form-control me-2" @bind-Value="_armyListNameForm.Name" />
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    }
    else
    {
        <h4>@ArmyListName</h4>
    }
</header>
@if (Army != null)
{
    <div class="overflow-auto">
        <div>
            <h5>Army Bonus</h5>
            <dl>
                @foreach (var rule in Army.ArmyBonuses)
                {
                    <dt>@rule.FullName</dt>
                    <dd>@rule.Rule.Description</dd>
                }
            </dl>
        </div>
        <div>
            <h5>Heroes</h5>
            <dl>
                @foreach (var hero in Army.Heroes)
                {
                    <dt>@($"{hero.Name} ({hero.Cost}p)")</dt>
                    <dd>@string.Join(", ", hero.Keywords)</dd>
                }
            </dl>
        </div>
        <div>
            <h5>Warriors</h5>
            <dl>
                @foreach (var warrior in Army.Warriors)
                {
                    <dt>@($"{warrior.Name} ({warrior.Cost}p)")</dt>
                    <dd>@string.Join(", ", warrior.Keywords)</dd>
                }
            </dl>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? ArmyListName { get; set; }

    [Parameter]
    public string? Side { get; set; }
    private Side SideEnum => Enum.TryParse<Side>(Side ?? string.Empty, true, out var side) ? side : Models.Side.Undefined;

    private Models.ArmyList? Army { get; set; }

    private readonly ArmyListNameForm _armyListNameForm = new();

    protected override async Task OnParametersSetAsync() => await LoadAsync();

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        if (string.IsNullOrEmpty(ArmyListName) || Army?.Name == ArmyListName)
            return;

        Army = await Context.ArmyLists.GetOrCreateAsync(ArmyListName, CancellationToken.None);
        Army.Side = SideEnum;
    }

    private void HandleValidSubmit()
    {
        NavigationManager.NavigateTo(RouteProvider.GetArmyListRoute(SideEnum, _armyListNameForm.Name));
    }

    private class ArmyListNameForm
    {
        public string Name { get; set; } = string.Empty;
    }
}