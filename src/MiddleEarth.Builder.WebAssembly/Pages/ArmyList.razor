@page "/{Side}/army-lists"
@page "/{Side}/army-lists/{ArmyListName}"
@inject NavigationManager NavigationManager
@inject Context Context
@inject IModalService ModalService
@inject ILogger<ArmyList> Logger

<header>
    <h3>Army List</h3>
    @if (string.IsNullOrEmpty(ArmyListName))
    {
        <EditForm class="d-flex flex-row align-items-center justify-content-center" Model="@_armyListNameForm" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="armyListName" class="form-label m-0 me-2">Name</label>
            <InputText id="armyListName" class="form-control me-2" @bind-Value="_armyListNameForm.Name" />
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    }
    else
    {
        <h4>@ArmyListName</h4>
    }
</header>
@if (Army != null)
{
    <div class="overflow-auto">
        <div>
            <h5>Army Bonus</h5>
            @foreach (var (rule, i) in Army.ArmyBonuses.Select((r, i) => (r, i)))
            {
                <button @onclick="() => ShowSpecialRuleForm(rule, i)"
                        class="bg-transparent border-0 p-1 text-start">
                    <div class="fw-bold">
                        @rule.FullName
                    </div>
                    <div class="ms-3 pre-wrap">
                        @rule.Rule.Description
                    </div>
                </button>
            }
            <button @onclick="() => ShowSpecialRuleForm()"
                    class="btn btn-secondary w-100 p-0">
                +
            </button>
        </div>
        <div>
            <h5>Heroes</h5>
            @foreach (var (hero, i) in Army.Heroes.Select((r, i) => (r, i)))
            {
                <button @onclick="() => ShowHeroForm(hero, i)"
                        class="bg-transparent border-0 p-1 text-start"
                        style="width: 400px; max-width: 400px">
                    <div class="d-flex justify-content-between">
                        <h6>
                            @hero.Name
                        </h6>
                        <h6>@($"{hero.Cost} pts")</h6>
                    </div>
                    <h7>
                        @($"{string.Join(", ", hero.Keywords)} - {hero.Tier.Name}")
                    </h7>
                    <table class="table table-striped text-center w-100">
                        <thead class="table-secondary">
                            <tr>
                                <th style="width: 30px; max-width: 30px;">Mv</th>
                                <th class="p-1"></th>
                                <th style="width: 40px; max-width: 40px;">F</th>
                                <th style="width: 30px; max-width: 30px;">S</th>
                                <th style="width: 30px; max-width: 30px;">D</th>
                                <th style="width: 30px; max-width: 30px;">A</th>
                                <th style="width: 30px; max-width: 30px;">W</th>
                                <th style="width: 30px; max-width: 30px;">C</th>
                                <th class="p-1"></th>
                                <th style="width: 30px; max-width: 30px;">M</th>
                                <th style="width: 30px; max-width: 30px;">W</th>
                                <th style="width: 30px; max-width: 30px;">F</th>
                                <th class="p-1"></th>
                                <th style="width: 50px; max-width: 50px;">Cost</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>@hero.Characteristics.Move</td>
                                <td class="p-1"></td>
                                <td>@hero.Characteristics.FightAndShoot</td>
                                <td>@hero.Characteristics.Strength</td>
                                <td>@hero.Characteristics.Defense</td>
                                <td>@hero.Characteristics.Attacks</td>
                                <td>@hero.Characteristics.Wounds</td>
                                <td>@hero.Characteristics.Courage</td>
                                <td class="p-1"></td>
                                <td class="p-0"><div class="shield p-2">@hero.Characteristics.Might</div></td>
                                <td class="p-0"><div class="shield p-2">@hero.Characteristics.Will</div></td>
                                <td class="p-0"><div class="shield p-2">@hero.Characteristics.Fate</div></td>
                                <td class="p-1"></td>
                                <td>@hero.Cost</td>
                            </tr>
                        </tbody>
                    </table>
                    @if (hero.DefaultEquipment.Any())
                    {
                        <h7>Wargear</h7>
                        <div>@string.Join(", ", hero.DefaultEquipment.Select(equipment => equipment.Profile.Name))</div>
                    }
                    @if (hero.OptionalEquipment.Any())
                    {
                        <h7>Options</h7>
                        <dl class="m-0">
                            @foreach (var equipment in hero.OptionalEquipment)
                            {
                                <div class="d-flex justify-content-between">
                                    <span>
                                        @equipment.Profile.Name
                                    </span>
                                    <span>@($"{equipment.Cost} pts")</span>
                                </div>
                            }
                        </dl>
                    }
                    @if (hero.SpecialRules.Any())
                    {
                        <h7>Special Rules</h7>
                        <dl class="m-0">
                            @foreach (var rule in hero.SpecialRules)
                            {
                                <dt>@rule.FullName</dt>
                                <dd class="ms-3 pre-wrap">@rule.Rule.Description</dd>
                            }
                        </dl>
                    }
                    @if (hero.HeroicActions.Any())
                    {
                        <h7>Heroic Actions</h7>
                        <ul>
                            @foreach (var action in hero.HeroicActions)
                            {
                                <li>@action.Name</li>
                            }
                        </ul>
                    }
                    @if (hero.MagicalPowers.Any())
                    {
                        <table class="table table-striped text-center w-100">
                            <thead class="table-secondary">
                                <tr>
                                    <th class="text-start"><h7>Magical Powers</h7></th>
                                    <th>Range</th>
                                    <th>Casting</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var power in hero.MagicalPowers)
                                {
                                    <tr>
                                        <td class="text-start">@power.Power.Name</td>
                                        <td>@(power.Range == 0 ? "-" : $"{power.Range}\"")</td>
                                        <td>@($"{power.Casting}+")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </button>
            }
            <button @onclick="() => ShowHeroForm()"
                    class="btn btn-secondary w-100 p-0">
                +
            </button>
        </div>
        <div>
            <h5 class="mt-2">Warriors</h5>
            @foreach (var (warrior, i) in Army.Warriors.Select((r, i) => (r, i)))
            {
                <button @onclick="() => ShowWarriorForm(warrior, i)"
                        class="bg-transparent border-0 p-1 text-start"
                        style="width: 400px; max-width: 400px">
                    <h6>
                        @($"{warrior.Name} ({warrior.Cost}p)")
                    </h6>
                    <div>
                        @string.Join(", ", warrior.Keywords)
                    </div>
                </button>
            }
            <button @onclick="() => ShowWarriorForm()"
                    class="btn btn-secondary w-100 p-0">
                +
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? ArmyListName { get; set; }

    [Parameter]
    public string? Side { get; set; }
    private Side SideEnum => Enum.TryParse<Side>(Side ?? string.Empty, true, out var side) ? side : Application.Domain.Side.Undefined;

    private Application.Domain.ArmyList? Army { get; set; }

    private readonly ArmyListNameForm _armyListNameForm = new();

    protected override async Task OnParametersSetAsync() => await LoadAsync();

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private Task LoadAsync()
    {
        if (string.IsNullOrEmpty(ArmyListName) || Army?.Name == ArmyListName)
            return Task.CompletedTask;

        Army = Context.ArmyLists.GetOrCreate(ArmyListName);
        Army.Side = SideEnum;

        return Task.CompletedTask;
    }

    private void HandleValidSubmit()
    {
        NavigationManager.NavigateTo(RouteProvider.GetArmyListRoute(SideEnum, _armyListNameForm.Name));
    }

    private class ArmyListNameForm
    {
        public string Name { get; set; } = string.Empty;
    }

    private async Task ShowSpecialRuleForm(ProfileSpecialRule? source = null, int? idx = null)
    {
        var data = await ShowForm<ProfileSpecialRule, ProfileSpecialRuleForm>(
            "Add army bonus",
            source ?? new ProfileSpecialRule(),
            Army!.ArmyBonuses, idx);
        if (data is { Rule.Name: { } })
            Context.SpecialRules.GetOrCreate(data.Rule.Name).Update(data.Rule);
    }

    private async Task ShowHeroForm(HeroProfile? source = null, int? idx = null)
    {
        var data = await ShowForm<HeroProfile, HeroProfileForm>(
            "Add hero profile",
            source ?? new HeroProfile(Army!, "", Tier.IndependentHero),
            Army!.Heroes, idx);
        if (data == null)
            return;

        foreach (var profileEquipment in data.Equipment)
            Context.Equipments.GetOrCreate(profileEquipment.Profile.Name).Update(profileEquipment.Profile);

        foreach (var profileSpecialRule in data.SpecialRules)
            Context.SpecialRules.GetOrCreate(profileSpecialRule.Rule.Name!).Update(profileSpecialRule.Rule);

        // foreach (var heroicAction in data.HeroicActions)
        //     Context.HeroicActions.GetOrCreate(heroicAction.Name).Update(heroicAction);

        foreach (var magicalPower in data.MagicalPowers)
            Context.MagicalPowers.GetOrCreate(magicalPower.Power.Name).Update(magicalPower.Power);
    }

    private Task ShowWarriorForm(WarriorProfile? source = null, int? idx = null) =>
        ShowForm<WarriorProfile, WarriorProfileForm>(
            "Add warrior profile",
            source ?? new WarriorProfile(Army!, ""),
            Army!.Warriors, idx);

    private async Task<T?> ShowForm<T, TFormComponent>(string title, T source,
        IList<T> list, int? idx)
     where T : class where TFormComponent : IComponent
    {
        ArgumentNullException.ThrowIfNull(Army);

        var parameters = new ModalParameters { { "Model", source } };
        var reference = ModalService.Show<TFormComponent>(title, parameters);
        var result = await reference.Result;
        if (result is { Confirmed: true, Data: T data })
        {
            if (idx != null)
                list[idx.Value] = data;
            else
                list.Add(data);

            return data;
        }
        if (result.Confirmed)
            Logger.LogError("Wrong Data type.");
        else
            Logger.LogDebug("Result is not confirmed.");

        return null;
    }
}