@page "/armies"
@page "/armies/{Side}"
@inject Context Context

<h3>@(SideEnum == Application.Domain.Side.Undefined ? "Armies" : $"{SideEnum} Armies")</h3>

@if (ArmyLists == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="container-fluid">
        @foreach (var armyList in ArmyLists)
        {
            <a href="@RouteProvider.GetArmyBuilderRoute(armyList.Name)" class="btn @(armyList.Side == Application.Domain.Side.Good ? "btn-primary" : "btn-danger") mb-2">@armyList.Name</a>
            <a href="@RouteProvider.GetArmyListRoute(SideEnum, armyList.Name)" class="btn btn-secondary mb-2">
                <i class="bi bi-pencil-square"></i>
            </a>
        }
    </div>

    <lead>
        <p>Can't find your army list? You can add it <a href="@RouteProvider.GetArmyListRoute(SideEnum)">here</a>.</p>
    </lead>
}

@code {
    [Parameter]
    public string? Side { get; set; }

    private IReadOnlyCollection<Application.Domain.ArmyList>? ArmyLists { get; set; }

    private Side SideEnum => Enum.TryParse<Side>(Side ?? string.Empty, true, out var side) ? side : Application.Domain.Side.Undefined;

    protected override Task OnParametersSetAsync()
    {
        ArmyLists = Context.GetArmyLists(SideEnum);

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        ArmyLists = Context.GetArmyLists(SideEnum);

        await base.OnInitializedAsync();
    }
}