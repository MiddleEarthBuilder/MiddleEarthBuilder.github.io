@inject Context Context

@if (Model != null)
{
    <EditForm Model="@Model" OnValidSubmit="@SubmitForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="name" class="form-label m-0 me-2">Name</label>
            <InputText id="name" class="form-control me-2" @bind-Value="Model.Name" />
        </div>
        <div class="mb-3">
            <label for="keywords" class="form-label m-0 me-2">Keywords</label>
            <InputText id="keywords" class="form-control me-2" @bind-Value="Model.KeywordsString" />
        </div>
        <div class="mb-3">
            <label for="tier" class="form-label m-0 me-2">Tier</label>
            <InputSelect id="tier" class="form-select" @bind-Value="Model!.TierEnum">
                <option value="@TierEnum.HeroOfLegend">@Tier.HeroOfLegend.Name</option>
                <option value="@TierEnum.HeroOfValour">@Tier.HeroOfValour.Name</option>
                <option value="@TierEnum.HeroOfFortitude">@Tier.HeroOfFortitude.Name</option>
                <option value="@TierEnum.MinorHero">@Tier.MinorHero.Name</option>
                <option value="@TierEnum.IndependentHero">@Tier.IndependentHero.Name</option>
            </InputSelect>
        </div>
        <div class="mb-3">
            <label class="form-label m-0 me-2">Characteristics</label>
            <table class="table-bordered border-input text-center w-100">
                <thead>
                    <tr>
                        <th><label for="move" class="form-label">Mv</label></th>
                        <th><label for="fight" class="form-label">F</label></th>
                        <th><label for="strength" class="form-label">S</label></th>
                        <th><label for="defense" class="form-label">D</label></th>
                        <th><label for="attack" class="form-label">A</label></th>
                        <th><label for="wound" class="form-label">W</label></th>
                        <th><label for="courage" class="form-label">C</label></th>
                        <th><label for="might" class="form-label">M</label></th>
                        <th><label for="will" class="form-label">W</label></th>
                        <th><label for="fate" class="form-label">F</label></th>
                        <th><label for="cost" class="form-label">Cost</label></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><InputNumber id="move" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Move" /></td>
                        <td>
                            <div class="d-flex justify-content-center m-auto">
                                <InputNumber id="fight" class="form-control form-sm" @bind-Value="Model.Characteristics.Fight" />/<InputNumber id="shoot" class="form-control form-sm" @bind-Value="Model.Characteristics.Shoot" />+
                            </div>
                        </td>
                        <td><InputNumber id="strength" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Strength" /></td>
                        <td><InputNumber id="defense" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Defense" /></td>
                        <td><InputNumber id="attack" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Attacks" /></td>
                        <td><InputNumber id="wound" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Wounds" /></td>
                        <td><InputNumber id="courage" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Courage" /></td>
                        <td><InputNumber id="might" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Might" /></td>
                        <td><InputNumber id="will" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Will" /></td>
                        <td><InputNumber id="fate" class="form-control form-sm m-auto" @bind-Value="Model.Characteristics.Fate" /></td>
                        <td><InputNumber id="cost" class="form-control m-auto" @bind-Value="Model.Cost" /></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="mb-3">
            <label class="form-label m-0 me-2">Equipment</label>
            <table class="table-bordered border-input text-center w-100">
                <thead>
                    <tr>
                        <th><label class="form-label">Name</label></th>
                        <th><label class="form-label">Description</label></th>
                        <th><label class="form-label">Bow?</label></th>
                        <th><label class="form-label">Multiple?</label></th>
                        <th><label class="form-label">Count</label></th>
                        <th><label class="form-label">Cost</label></th>
                        <th><label class="form-label">Replaces</label></th>
                        <th style="min-width: 57px; width: 57px; max-width: 57px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (equipment, i) in Model.Equipment.Select((e, i) => (e, i)))
                    {
                        <tr>
                            <th><InputText id="@($"equipment-{i}-name")" class="form-control m-auto" @bind-Value="equipment.Profile.Name" /></th>
                            <td><InputText id="@($"equipment-{i}-description")" class="form-control m-auto" @bind-Value="equipment.Profile.Description" /></td>
                            <td><InputCheckbox id="@($"equipment-{i}-bow")" class="form-check-input m-auto" @bind-Value="equipment.Profile.IsBow" /></td>
                            <td><InputCheckbox id="@($"equipment-{i}-once")" class="form-check-input m-auto" @bind-Value="equipment.Profile.IsMultiple" /></td>
                            <td><InputNumber id="@($"equipment-{i}-count")" class="form-control form-sm m-auto" @bind-Value="equipment.DefaultCount" /></td>
                            <td><InputNumber id="@($"equipment-{i}-cost")" class="form-control m-auto" @bind-Value="equipment.Cost" /></td>
                            <td><InputText id="@($"equipment-{i}-replaced-equipment")" class="form-control m-auto" @bind-Value="equipment.ReplacedEquipmentString" /></td>
                            <td>
                                @if (i > 0)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.Equipment.Swap(i, i - 1)">
                                        <i class="bi bi-caret-up"></i>
                                    </button>
                                }
                                @if (i < Model.Equipment.Count - 1)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.Equipment.Swap(i, i + 1)">
                                        <i class="bi bi-caret-down"></i>
                                    </button>
                                }
                                <button type="button" class="btn btn-light p-0" @onclick="() => Model.Equipment.RemoveAt(i)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <BlazoredTypeahead SearchMethod="@SearchEquipment" Debounce="100"
            @bind-Value="NewEquipment">
                <SelectedTemplate Context="equipment">
                    @equipment.Name
                </SelectedTemplate>
                <ResultTemplate Context="equipment">
                    @equipment.Name
                </ResultTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="mb-3">
            <label class="form-label m-0 me-2">Special Rules</label>
            <table class="table-bordered border-input text-center w-100">
                <thead>
                    <tr>
                        <th><label class="form-label">Name</label></th>
                        <th><label class="form-label">Target</label></th>
                        <th><label class="form-label">Description</label></th>
                        <th style="min-width: 57px; width: 57px; max-width: 57px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (specialRule, i) in Model.SpecialRules.Select((r, i) => (r, i)))
                    {
                        <tr>
                            <th><InputText id="@($"rule-{i}-name")" class="form-control m-auto" @bind-Value="specialRule.Rule.Name" /></th>
                            <td><InputText id="@($"rule-{i}-target")" class="form-control m-auto" @bind-Value="specialRule.Target" /></td>
                            <td><InputText id="@($"rule-{i}-description")" class="form-control m-auto" @bind-Value="specialRule.Rule.Description" /></td>
                            <td>
                                @if (i > 0)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.SpecialRules.Swap(i, i - 1)">
                                        <i class="bi bi-caret-up"></i>
                                    </button>
                                }
                                @if (i < Model.SpecialRules.Count - 1)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.SpecialRules.Swap(i, i + 1)">
                                        <i class="bi bi-caret-down"></i>
                                    </button>
                                }
                                <button type="button" class="btn btn-light p-0" @onclick="() => Model.SpecialRules.RemoveAt(i)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <BlazoredTypeahead SearchMethod="@SearchRule" Debounce="100"
            @bind-Value="NewRule">
                <SelectedTemplate Context="rule">
                    @rule.Name
                </SelectedTemplate>
                <ResultTemplate Context="rule">
                    @rule.Name
                </ResultTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="mb-3">
            <label class="form-label m-0 me-2">Heroic Actions</label>
            <table class="table-bordered border-input text-center w-100">
                <thead>
                    <tr>
                        <th><label class="form-label">Name</label></th>
                        <th><label class="form-label">Description</label></th>
                        <th style="min-width: 57px; width: 57px; max-width: 57px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (heroicAction, i) in Model.HeroicActions.Select((a, i) => (a, i)))
                    {
                        <tr>
                            <th><InputText id="@($"heroicAction-{i}-name")" class="form-control m-auto" @bind-Value="heroicAction.Name" /></th>
                            <td><InputText id="@($"heroicAction-{i}-description")" class="form-control m-auto" @bind-Value="heroicAction.Description" /></td>
                            <td>
                                @if (i > 0)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.HeroicActions.Swap(i, i - 1)">
                                        <i class="bi bi-caret-up"></i>
                                    </button>
                                }
                                @if (i < Model.HeroicActions.Count - 1)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.HeroicActions.Swap(i, i + 1)">
                                        <i class="bi bi-caret-down"></i>
                                    </button>
                                }
                                <button type="button" class="btn btn-light p-0" @onclick="() => Model.HeroicActions.RemoveAt(i)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <BlazoredTypeahead SearchMethod="@SearchHeroicAction" Debounce="100"
            @bind-Value="NewHeroicAction">
                <SelectedTemplate Context="heroicAction">
                    @heroicAction.Name
                </SelectedTemplate>
                <ResultTemplate Context="heroicAction">
                    @heroicAction.Name
                </ResultTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="mb-3">
            <label class="form-label m-0 me-2">Magical Powers</label>
            <table class="table-bordered border-input text-center w-100">
                <thead>
                    <tr>
                        <th><label class="form-label">Name</label></th>
                        <th><label class="form-label">Range</label></th>
                        <th><label class="form-label">Casting</label></th>
                        <th><label class="form-label">Description</label></th>
                        <th style="min-width: 57px; width: 57px; max-width: 57px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (magicalPower, i) in Model.MagicalPowers.Select((p, i) => (p, i)))
                    {
                        <tr>
                            <th><InputText id="@($"magicalPower-{i}-name")" class="form-control m-auto" @bind-Value="magicalPower.Power.Name" /></th>
                            <td><InputNumber id="@($"magicalPower-{i}-range")" class="form-control m-auto" @bind-Value="magicalPower.Range" /></td>
                            <td><InputNumber id="@($"magicalPower-{i}-casting")" class="form-control m-auto" @bind-Value="magicalPower.Casting" /></td>
                            <th><InputText id="@($"magicalPower-{i}-description")" class="form-control m-auto" @bind-Value="magicalPower.Power.Description" /></th>
                            <td>
                                @if (i > 0)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.MagicalPowers.Swap(i, i - 1)">
                                        <i class="bi bi-caret-up"></i>
                                    </button>
                                }
                                @if (i < Model.MagicalPowers.Count - 1)
                                {
                                    <button type="button" class="btn btn-light p-0" @onclick="() => Model.MagicalPowers.Swap(i, i + 1)">
                                        <i class="bi bi-caret-down"></i>
                                    </button>
                                }
                                <button type="button" class="btn btn-light p-0" @onclick="() => Model.MagicalPowers.RemoveAt(i)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <BlazoredTypeahead SearchMethod="@SearchMagicalPower" Debounce="100"
            @bind-Value="NewMagicalPower">
                <SelectedTemplate Context="magicalPower">
                    @magicalPower.Name
                </SelectedTemplate>
                <ResultTemplate Context="magicalPower">
                    @magicalPower.Name
                </ResultTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="mb-3">
            <label for="note" class="form-label m-0 me-2">Note</label>
            <InputText id="note" class="form-control me-2" @bind-Value="Model.Note" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}
else
{
    <lead>Model is not loaded correctly.</lead>
}

@code {

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private readonly EquipmentProfile _defaultEquipment = new("Find equipment by name...");
    private EquipmentProfile? NewEquipment
    {
        get => _defaultEquipment;
        set
        {
            if (!string.IsNullOrEmpty(value?.Name) && (Model?.Equipment.All(equipment => equipment.Profile.Name != value.Name) ?? false))
                Model?.Equipment.Add(new ProfileEquipment(value));
        }
    }

    private readonly SpecialRule _defaultRule = new("Find special rule by name...");
    private SpecialRule? NewRule
    {
        get => _defaultRule;
        set
        {
            if (!string.IsNullOrEmpty(value?.Name) && (Model?.SpecialRules.All(rule => rule.Rule.Name != value.Name) ?? false))
                Model?.SpecialRules.Add(new ProfileSpecialRule(value));
        }
    }

    private readonly HeroicAction _defaultHeroicAction = new("Find heroic action by name...");
    private HeroicAction? NewHeroicAction
    {
        get => _defaultHeroicAction;
        set
        {
            if (!string.IsNullOrEmpty(value?.Name) && (Model?.HeroicActions.All(action => action.Name != value.Name) ?? false))
                Model?.HeroicActions.Add(value);
        }
    }

    private readonly MagicalPower _defaultMagicalPower = new("Find magical power by name...");
    private MagicalPower? NewMagicalPower
    {
        get => _defaultMagicalPower;
        set
        {
            if (!string.IsNullOrEmpty(value?.Name) && (Model?.MagicalPowers.All(power => power.Power.Name != value.Name) ?? false))
                Model?.MagicalPowers.Add(new ProfileMagicalPower(value));
        }
    }

    [Parameter]
    public HeroProfile? Model { get; set; }

    private async Task SubmitForm() =>
        await BlazoredModal.CloseAsync(ModalResult.Ok(Model));

    private async Task<IEnumerable<EquipmentProfile>> SearchEquipment(string searchText) =>
        await Task.FromResult(Context.Equipments.GetAll(searchText, Model?.Equipment.Select(equipment => equipment.Profile.Name), true));

    private async Task<IEnumerable<SpecialRule>> SearchRule(string searchText) =>
        await Task.FromResult(Context.SpecialRules.GetAll(searchText, Model?.SpecialRules.Select(rule => rule.Rule.Name!), true));

    private async Task<IEnumerable<HeroicAction>> SearchHeroicAction(string searchText) =>
        await Task.FromResult(Context.HeroicActions.GetAll(searchText, Model?.HeroicActions.Select(action => action.Name), true));

    private async Task<IEnumerable<MagicalPower>> SearchMagicalPower(string searchText) =>
        await Task.FromResult(Context.MagicalPowers.GetAll(searchText, Model?.MagicalPowers.Select(power => power.Power.Name), true));

}